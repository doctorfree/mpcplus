#!/bin/bash
#
# get_latest - retrieve the latest release of a Github repository release
#

OWNER=doctorfree
PROJECT=mpcplus
API_URL="https://api.github.com/repos/${OWNER}/${PROJECT}/releases/latest"

# Filtering the returned JSON object from the API request with:
#
#   curl --silent "${API_URL}" | \
#     jq --raw-output '.assets | .[].browser_download_url'
#
# provides us with the release assets' browser download urls. For example:
#
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus-pkgbuild-1.0.0-1.tar.gz
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus-v1.0.0r1-1-x86_64.pkg.tar.zst
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus_1.0.0-1.amd64.deb
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus_1.0.0-1.armhf.deb
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus_1.0.0-1.el8.x86_64.rpm
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus_1.0.0-1.fc36.x86_64.rpm
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus_1.0.0-1.tgz
# .../${OWNER}/${PROJECT}/.../TAG/mpcplus_1.0.0-1.zip
#
# To select the desired platform asset, use one of the following filters
#
# Arch:
#   CURL_PIP_TO_JQ | grep "\.pkg\.tar\.zst"
# CentOS:
#   CURL_PIP_TO_JQ | grep "\.el.*x86_64\.rpm"
# Fedora:
#   CURL_PIP_TO_JQ | grep "\.fc.*x86_64\.rpm"
# Raspberry Pi OS:
#   CURL_PIP_TO_JQ | grep "\.armhf\.deb"
# Ubuntu:
#   CURL_PIP_TO_JQ | grep "\.amd64\.deb"

arch=
centos=
debian=
fedora=
rpi=
ubuntu=
mach=`uname -m`
if [ -f /etc/os-release ]
then
  . /etc/os-release
  [ "${ID_LIKE}" == "debian" ] && debian=1
  [ "${ID}" == "arch" ] || [ "${ID_LIKE}" == "arch" ] && arch=1
  [ "${ID}" == "centos" ] && centos=1
  [ "${ID}" == "fedora" ] && fedora=1
else
  if [ -f /etc/arch-release ]
  then
	arch=1
  else
    case "${mach}" in
      arm*)
		debian=1
		rpi=1
        ;;
      x86*)
        if uname -v | grep -i ubuntu > /dev/null
        then
		  debian=1
		  ubuntu=1
        else
		  # CentOS or Fedora
          if [ -f /etc/fedora-release ]
          then
            fedora=1
          else
            if [ -f /etc/centos-release ]
            then
              centos=1
            else
              echo "Unknown operating system distribution"
            fi
          fi
        fi
        ;;
      *)
        echo "Unknown machine architecture"
        ;;
    esac
  fi
fi

DL_URL=
if [ "${arch}" ]
then
  DL_URL=$(curl --silent "${API_URL}" | \
           jq --raw-output '.assets | .[].browser_download_url' | \
           grep "\.pkg\.tar\.zst")
else
  if [ "${centos}" ]
  then
    DL_URL=$(curl --silent "${API_URL}" | \
             jq --raw-output '.assets | .[].browser_download_url' | \
             grep "\.el.*x86_64\.rpm")
  else
    if [ "${fedora}" ]
    then
      DL_URL=$(curl --silent "${API_URL}" | \
               jq --raw-output '.assets | .[].browser_download_url' | \
               grep "\.fc.*x86_64\.rpm")
    else
      if [ "${debian}" ]
      then
        if [ "${mach}" == "x86_64" ]
        then
          DL_URL=$(curl --silent "${API_URL}" | \
                   jq --raw-output '.assets | .[].browser_download_url' | \
                   grep "\.amd64\.deb")
        else
          DL_URL=$(curl --silent "${API_URL}" | \
                   jq --raw-output '.assets | .[].browser_download_url' | \
                   grep "\.arm.*\.deb")
        fi
      else
        echo "No release asset found for this platform"
      fi
    fi
  fi
fi

[ "${DL_URL}" ] && {
  printf "\nRelease asset download url:"
  printf "\n\t${DL_URL}\n"
}
