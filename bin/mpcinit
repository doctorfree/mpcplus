#!/bin/bash
#
# mpcinit - initialize mpcplus
#
# Copy and configure default configuration files in $HOME/.config/mpcplus/
#

MPCONFDIR=/usr/share/mpcplus
SCPTDIR=${MPCONFDIR}/scripts
MPPCDIR=/usr/share/musicplayerplus
MPPSCPTDIR=${MPPCDIR}/scripts
USERCONF=${HOME}/.config
MPDCONFDIR="${USERCONF}/mpd"
USRMPDCONF="${MPDCONFDIR}/mpd.conf"
SYSMPDCONF="/etc/mpd.conf"

BOLD=$(tput bold)
NORM=$(tput sgr0)

mud="music_directory"
mpd_music="~/Music"
exp_music="${HOME}/Music"
senable=
sactive=
uenable=
uactive=
use_sys_mpd=
use_usr_mpd=

usage() {
  printf "\nUsage: mpcinit [-o] [-q] [-r] [-U] [-y] [-u] [mpd|sync]"
  printf "\nWhere:"
  printf "\n\t'-o' indicates overwrite any pre-existing configuration"
  printf "\n\t'-q' indicates quiet execution, no status messages"
  printf "\n\t'-y' indicates answer 'yes' to all and proceed"
  printf "\n\t'-u' displays this usage message and exits\n"
  printf "\n\t'mpd' activates the MPD music server"
  printf "\n\t'sync' synchronizes mpcplus configuration across configs"
  printf "\n\n'mpcinit' must be run as the mpcplus user, not root.\n\n"
  exit 1
}

set_music_dir() {
  if [ "${use_sys_mpd}" ] && [ "${use_usr_mpd}" ]
  then
    # If both system and usr mpd are enabled/active then use the user config
    MPDCONF="${USRMPDCONF}"
  else
    if [ "${use_sys_mpd}" ]
    then
      MPDCONF="${SYSMPDCONF}"
    else
      MPDCONF="${USRMPDCONF}"
    fi
  fi
  mpd_music=
  mpd_bind=
  mpd_port=
  # Use MPD config as source of truth
  [ -f "${MPDCONF}" ] && {
    mpd_music=`grep ^${mud} ${MPDCONF}`
    mpd_music=`echo ${mpd_music} | awk ' { print $2 } ' | sed -e "s/\"//g"`
    # Need to expand the tilda to $HOME
    exp_music="${mpd_music/#\~/$HOME}"

    mpd_bind=`grep ^bind_to_address ${MPDCONF}`
    mpd_bind=`echo ${mpd_bind} | awk ' { print $2 } ' | sed -e "s/\"//g"`
    mpd_port=`grep ^port ${MPDCONF}`
    mpd_port=`echo ${mpd_port} | awk ' { print $2 } ' | sed -e "s/\"//g"`
  }
  # Why wasn't it set in config?
  [ "${mpd_music}" ] || {
    mpd_music="~/Music"
    exp_music="${HOME}/Music"
  }
}

sync_music_dir() {
  if [ "${mpd_music}" ]
  then
    mpc_music=`grep ^mpd_music_dir ${MPCDIR}/config`
    mpc_music=`echo ${mpc_music} | awk ' { print $3 } '`
    [ "${mpd_music}" == "${mpc_music}" ] || {
      cat ${MPCDIR}/config | \
        sed -e "s%^mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/mpc$$
      cp /tmp/mpc$$ ${MPCDIR}/config
      rm -f /tmp/mpc$$
    }

    [ "${mpd_bind}" ] && {
      append=
      comment=
      mpc_host=`grep ^mpd_host ${MPCDIR}/config`
      [ "${mpc_host}" ] || {
        mpc_host=`grep ^#mpd_host ${MPCDIR}/config`
        if [ "${mpc_host}" ]
        then
          comment=1
        else
          append=1
        fi
      }
      mpc_host=`echo ${mpc_host} | awk ' { print $3 } '`
      [ "${mpd_bind}" == "${mpc_host}" ] || {
        if [ "${comment}" ]
        then
          cat ${MPCDIR}/config | \
            sed -e "s%^\#mpd_host.*%mpd_host = ${mpd_bind}%" > /tmp/mpc$$
          cp /tmp/mpc$$ ${MPCDIR}/config
          rm -f /tmp/mpc$$
        else
          if [ "${append}" ]
          then
            echo "mpd_host = ${mpd_bind}" >> ${MPCDIR}/config
          else
            cat ${MPCDIR}/config | \
              sed -e "s%^mpd_host.*%mpd_host = ${mpd_bind}%" > /tmp/mpc$$
            cp /tmp/mpc$$ ${MPCDIR}/config
            rm -f /tmp/mpc$$
          fi
        fi
      }
    }
    [ "${mpd_port}" ] && {
      append=
      comment=
      mpc_port=`grep ^mpd_port ${MPCDIR}/config`
      [ "${mpc_port}" ] || {
        mpc_port=`grep ^#mpd_port ${MPCDIR}/config`
        if [ "${mpc_port}" ]
        then
          comment=1
        else
          append=1
        fi
      }
      mpc_port=`echo ${mpc_port} | awk ' { print $3 } '`
      [ "${mpd_port}" == "${mpc_port}" ] || {
        if [ "${comment}" ]
        then
          cat ${MPCDIR}/config | \
            sed -e "s%^\#mpd_port.*%mpd_port = ${mpd_port}%" > /tmp/mpc$$
          cp /tmp/mpc$$ ${MPCDIR}/config
          rm -f /tmp/mpc$$
        else
          if [ "${append}" ]
          then
            echo "mpd_port = ${mpd_port}" >> ${MPCDIR}/config
          else
            cat ${MPCDIR}/config | \
              sed -e "s%^mpd_port.*%mpd_port = ${mpd_port}%" > /tmp/mpc$$
            cp /tmp/mpc$$ ${MPCDIR}/config
            rm -f /tmp/mpc$$
          fi
        fi
      }
    }

    [ "${use_sys_mpd}" ] || {
      systemctl --user daemon-reload --quiet
      # Enable and activate the MPD user service
      systemctl --user is-active --quiet mpd.service > /dev/null 2>&1
      if [ $? -eq 0 ]
      then
        systemctl --user restart --quiet mpd.service > /dev/null 2>&1
      else
        systemctl --user start --quiet mpd.service > /dev/null 2>&1
      fi
      systemctl --user is-enabled --quiet mpd.service > /dev/null 2>&1
      [ $? -eq 0 ] || systemctl --user enable --quiet mpd.service > /dev/null 2>&1
      [ "${have_mpc}" ] && {
        [ "${sactive}" ] || [ "${uactive}" ] && {
          mpc update --quiet &
        }
      }
    }
  else
    echo "WARNING:"
    echo "Could not detect any music_directory setting in ${MPDCONF}"
    echo "Manual configuration of ${SYSMPDCONF} or ${USRMPDCONF} required"
  fi
}

get_mpd_status() {
  # First check system-wide MPD service
  systemctl is-enabled --quiet mpd.service > /dev/null 2>&1
  [ $? -eq 0 ] && senable=1
  systemctl is-enabled --quiet mpd.socket > /dev/null 2>&1
  [ $? -eq 0 ] && senable=1
  systemctl is-active --quiet mpd.service > /dev/null 2>&1
  [ $? -eq 0 ] && sactive=1
  systemctl is-active --quiet mpd.socket > /dev/null 2>&1
  [ $? -eq 0 ] && sactive=1
  if [ "${sactive}" ] || [ "${senable}" ]
  then
    use_sys_mpd=1
  else
    # Next check user MPD service
    systemctl --user is-enabled --quiet mpd.service > /dev/null 2>&1
    [ $? -eq 0 ] && uenable=1
    systemctl --user is-enabled --quiet mpd.socket > /dev/null 2>&1
    [ $? -eq 0 ] && uenable=1
    systemctl --user is-active --quiet mpd.service > /dev/null 2>&1
    [ $? -eq 0 ] && uactive=1
    systemctl --user is-active --quiet mpd.socket > /dev/null 2>&1
    [ $? -eq 0 ] && uactive=1
    [ "${uactive}" ] || [ "${uenable}" ] && use_usr_mpd=1
  fi
}

function check_py_version
{
  # Full version number e.g. 2.7.1
  python_version="$(echo "$($1 -V 2>&1)" | sed -e "s/^.* \(.*\)$/\\1/g")"

  # Return (the first letter -lt "3")
  ! [ "$(echo $python_version | head -c 1 )" -lt "3" ]
}

init_warn() {
  printf "\nmpcplus is not yet initialized."
  printf "\nInitialize with ${BOLD}mpcinit${NORM} prior to running "
  printf "${BOLD}mpcinit $1${NORM}\n"
  printf "\nExiting."
  usage
}

set_python() {
  PYTHON=""
  POTENTIAL_BINARIES=( "python" "python3" "python3.6" "python3.5" "python3.7" "python3.4" "python3.3" "python3.8" "python3.2" "python3.1" )
  PY3_SUPPORT=false

  for i in "${POTENTIAL_BINARIES[@]}"
  do
	PYTHON="$i"

	if  $(check_py_version ${PYTHON}) ;
	then
		PY3_SUPPORT=true
		break
	fi
  done

  if [ ! ${PY3_SUPPORT} ]
  then
	echo "[ERROR] Could not find python3 binary."
    echo "Please add it to your \$PATH before continuing."
	exit
  fi
}

visit_wiki() {
  printf "\nVisit the mpcplus Wiki at:"
  printf "\n\t${BOLD}https://github.com/doctorfree/mpcplus/wiki${NORM}\n"
  printf "\nBuy Doctorfree a cup of coffee at:"
  printf "\n\t${BOLD}https://github.com/sponsors/doctorfree${NORM}\n"
}

# Clear the Bash cache so we know for sure if something is installed
hash -r

overwrite=
proceed=
remove=
upgrade=1
quiet=

arch=
mach=`uname -m`
centos=
debian=
fedora=
APT=
DNF=
[ -f /etc/os-release ] && . /etc/os-release
[ "${ID}" == "debian" ] || [ "${ID_LIKE}" == "debian" ] && debian=1
[ "${ID}" == "arch" ] || [ "${ID_LIKE}" == "arch" ] && arch=1
[ "${ID}" == "centos" ] && centos=1
[ "${ID}" == "fedora" ] && fedora=1
[ "${arch}" ] || [ "${debian}" ] || [ "${fedora}" ] || [ "${centos}" ] || {
  echo "${ID_LIKE}" | grep debian > /dev/null && debian=1
}
[ "${debian}" ] && {
  have_apt=`type -p apt`
  if [ "${have_apt}" ]
  then
    APT="apt -q -y"
  else
    have_aptget=`type -p apt-get`
    if [ "${have_aptget}" ]
    then
      APT="apt-get -q -y"
    else
      echo "Could not locate apt or apt-get."
    fi
  fi
}

[ "${centos}" ] || [ "${fedora}" ] && {
  have_dnf=`type -p dnf`
  if [ "${have_dnf}" ]
  then
    DNF="dnf --assumeyes --quiet"
  else
    have_yum=`type -p yum`
    if [ "${have_yum}" ]
    then
      DNF="yum --assumeyes --quiet"
    else
      echo "Could not locate dnf or yum."
    fi
  fi
}

while getopts "oqrUyu" flag; do
    case $flag in
        o)
            overwrite=1
            ;;
        q)
            quiet=1
            ;;
        r)
            remove=1
            ;;
        U)
            upgrade=
            ;;
        y)
            proceed=1
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

argument=`echo "$1" | tr '[:upper:]' '[:lower:]'`

# User should not be root. Prompt to proceed if root user
iamroot=
if [ "${EUID}" ]
then
  [ ${EUID} -eq 0 ] && iamroot=1
else
  uid=`id -u`
  [ ${uid} -eq 0 ] && iamroot=1
fi

[ "${iamroot}" ] && {
  printf "\nThe ${BOLD}mpcinit${NORM} command should be run as a normal user."
  printf "\nIt appears it has been invoked with 'root' user privileges.\n\n"
  while true
  do
    read -p "Do you intend to use mpcplus as the 'root' user ? (y/n) " yn
    case $yn in
        [Yy]* )
                break
                ;;
        [Nn]* )
                printf "\nRe-run this command as a normal user."
                printf "\nExiting.\n\n"
                exit 0
                ;;
            * ) echo "Please answer yes or no."
                ;;
    esac
  done
}

[ -f ${MPCONFDIR}/config ] || {
    echo "${MPCONFDIR}/config does not exist."
    echo "mpcplus installation incomplete"
    exit 1
}
[ -f ${MPCONFDIR}/bindings ] || {
    echo "${MPCONFDIR}/bindings does not exist."
    echo "mpcplus installation incomplete"
    exit 1
}

get_mpd_status
set_music_dir

[ -d ${USERCONF} ] || mkdir ${USERCONF}
if [ -f ${USERCONF}/mpcplus/config ]
then
  MPCDIR="${USERCONF}/mpcplus"
  initialized=1
else
  if [ -f ${HOME}/.mpcplus/config ]
  then
    MPCDIR="${HOME}/.mpcplus"
    initialized=1
  else
    [ -d ${USERCONF}/mpcplus ] || mkdir -p ${USERCONF}/mpcplus
    cp ${MPCONFDIR}/config ${USERCONF}/mpcplus/config
    MPCDIR="${USERCONF}/mpcplus"
    initialized=
  fi
fi

[ "${argument}" == "sync" ] && {
  if [ "${initialized}" ]
  then
    printf "\nSyncing mpcplus music directory, please wait ..."
    sync_music_dir
    printf "\n\nmpcplus music directory synchronized.\n"
  else
    init_warn sync
  fi
  exit 0
}

pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="$1${PATH:+":$PATH"}"
  fi
}

install_mpc() {
  pathadd "${HOME}/.local/bin"
  have_meson=`type -p meson`
  have_ninja=`type -p ninja`
  [ "${have_meson}" ] && [ "${have_ninja}" ] || set_python
  [ -d ${HOME}/src ] || mkdir -p ${HOME}/src
  cd ${HOME}/src
  [ -d mpc ] && mv mpc mpc$$
  git clone https://github.com/MusicPlayerDaemon/mpc.git
  cd mpc
  [ "${have_meson}" ] || ${PYTHON} -m pip install --user meson
  [ "${have_ninja}" ] || ${PYTHON} -m pip install --user ninja
  meson . output
  ninja -C output
  [ -x output/mpc ] && sudo cp output/mpc /usr/bin/mpc
  cd ${HOME}/src
  [ -d mpc$$ ] && {
    rm -rf mpc
    mv mpc$$ mpc
  }
  have_mpc=`type -p mpc`
}

[ "${argument}" == "mpd" ] && {
  if [ "${initialized}" ]
  then
    m_enabled=
    m_active=
    systemctl --user is-enabled mopidy.service >/dev/null 2>&1 && m_enabled=1
    systemctl --user is-active mopidy.service >/dev/null 2>&1 && m_active=1
    printf "\nActivating the Music Player Daemon (MPD) music server."
    [ "${m_enabled}" ] || [ "${m_active}" ] && {
      printf "\nThis will deactivate Mopidy and Mopidy extensions.\n\n"
      while true
      do
        read -p "Do you wish to continue with MPD activation ? (y/n) " yn
        case $yn in
          [Yy]* )
                break
                ;;
          [Nn]* )
                printf "\nMPD activation aborted."
                printf "\nExiting.\n\n"
                exit 0
                ;;
              * ) echo "Please answer yes or no."
                ;;
        esac
      done
    }
    [ "${m_enabled}" ] && {
      systemctl --user disable mopidy.service > /dev/null 2>&1
    }
    [ "${m_active}" ] && {
      systemctl --user stop mopidy.service > /dev/null 2>&1
    }

    # Reconfigure mpcplus/mppcava with MPD visualizer data source
    [ -x ${MPPSCPTDIR}/viz_data_src.sh ] && ${MPPSCPTDIR}/viz_data_src.sh mpd

    systemctl --user is-active mpd.service >/dev/null 2>&1 || {
      systemctl --user start mpd.service > /dev/null 2>&1
    }
    systemctl --user is-enabled mpd.service >/dev/null 2>&1 || {
      systemctl --user enable mpd.service > /dev/null 2>&1
    }
    [ "${have_mpc}" ] && {
      [ "${sactive}" ] || [ "${uactive}" ] && {
        mpc update --quiet &
      }
    }

    [ -f ${HOME}/.config/systemd/user/mpdstats.service ] && {
      systemctl --user is-active mpdstats.service >/dev/null 2>&1 || {
        systemctl --user start mpdstats.service > /dev/null 2>&1
      }
      systemctl --user is-enabled mpdstats.service >/dev/null 2>&1 || {
        systemctl --user enable mpdstats.service > /dev/null 2>&1
      }
    }
    [ -f ${HOME}/.config/systemd/user/yams.service ] && {
      systemctl --user is-active yams.service >/dev/null 2>&1 || {
        systemctl --user start yams.service > /dev/null 2>&1
      }
      systemctl --user is-enabled yams.service >/dev/null 2>&1 || {
        systemctl --user enable yams.service > /dev/null 2>&1
      }
    }
  else
    init_warn mpd
  fi
  if [ "${m_enabled}" ] || [ "${m_active}" ]
  then
    printf "\n\n${BOLD}Mopidy deactivated, MPD services enabled and activated${NORM}\n"
  else
    printf "\n\n${BOLD}MPD services enabled and activated${NORM}\n"
  fi
  exit 0
}

[ ${initialized} ] && {
  [ "${proceed}" ] || {
    [ "${overwrite}" ] || {
      printf "\nmpcplus initialization has previously been performed"
      printf "\nand there is an existing mpcplus configuration.\n\n"
      while true
      do
        read -p "Preserve existing, Overwrite existing, Skip ? (p/o/s) " pos
        case $pos in
          [Pp]* )
            break
            ;;
          [Oo]* )
            overwrite=1
            break
            ;;
          [Ss]* )
            printf "\nExiting.\n\n"
            exit 0
            ;;
          * ) echo "Please answer 'p', 'o', or 's'."
            ;;
        esac
      done
    }
  }
}

printf "\nInitializing mpcplus, please wait ..."

# Check if configured music library location is empty
empty_music=1
[ -d "${exp_music}" ]  && {
  for mdir in ${exp_music}/*
  do
    [ "${mdir}" == "${exp_music}/*" ] && continue
    [ "${mdir}" == "${exp_music}/Playlists" ] && continue
    empty_music=
    break
  done
}

[ "${empty_music}" ] && {
  printf "\n\n${BOLD}Configured music library location appears empty${NORM}"
  printf "\nmpcplus initialization will continue with an empty library."
  printf "\nThe music library can be populated later or, if your music library"
  printf "\nis in a custom location, edit $HOME/.config/mpd/mpd.conf or"
  printf "\n/etc/mpd.conf after initialization and run 'mpcinit sync'.\n"
}

have_mpc=`type -p mpc`
[ "${centos}" ] && {
  [ "${have_mpc}" ] || {
    have_git=`type -p git`
    [ "${have_git}" ] || sudo ${DNF} install git
    install_mpc
  }
}

[ "${quiet}" ] || {
  printf "\n\tInstalling configuration files in $USERCONF ..."
}
if [ -f ${MPCDIR}/bindings ]
then
  [ "${overwrite}" ] && cp ${MPCONFDIR}/bindings ${MPCDIR}/bindings
else
  cp ${MPCONFDIR}/bindings ${MPCDIR}/bindings
fi

# Integrate previously set ncmpcpp user preferences into mpcplus/config
[ -x ${SCPTDIR}/set_prev_ncmpcpp.sh ] && ${SCPTDIR}/set_prev_ncmpcpp.sh

[ "${quiet}" ] || {
  printf "\n\tSyncing mpcplus configuration across all configs ..."
}
sync_music_dir

printf " done.\n"

printf "\n${BOLD}mpcplus Initialization Complete${NORM}"
[ "${empty_music}" ] && {
  printf "\n\t${BOLD}Note:${NORM} Configured music library location is empty"
}
printf "\n\nMusic library location set to ${BOLD}${mpd_music}${NORM} in:"
printf "\n\t${MPDCONF}"
printf "\nModify ${MPDCONF} 'music_directory' to change this."
printf "\nIf 'music_directory' is modified, run '${BOLD}mpcinit sync${NORM}'\n"
visit_wiki
